%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
using namespace std;

extern int yylex();
extern int yyparse();
extern FILE* yyin;

void yyerror(char const*);

map<string, int> symbolTable;

vector<int> doLoops;

int rCount = 0;


%}

%union {

	int value;
	char* str;
}

%error-verbose

%token <value> NUMBER
%token <str> NAME
%token <str> STRINGTEXT

%token EOL 
%token FUNC
%token OUT
%token ANDAND OROR
%token BEG END
%left CP OP
%left DOTLT DOTEQ DOTNEQ DOTGE
%token EQL GT LT
%left ADD SUB
%left MUL DIV MOD
%left EX
%token <value> OUTP
%token SEMI QUOTE COMMA
%token NEWLINE
%token FUNCPRINTLINE FUNCPUSHI FUNCPRINTINT FUNCPRINTSTRING FUNCPRINTS FUNCPRINTI
%token DOSTATE CONTINUESTATE IFSTATE FUNCMAIN ELSESTATE
%token VARSTRING VARINT VARCHAR VARLONG VARENUM;

%type <value> exp
%type <value> state


%%

start : line
;

line : 

		line SEMI
	|	line NEWLINE
	|	line state NEWLINE
	| 	line state SEMI
	| 	line error SEMI { cout << ">>> "; yyclearin; } 
	|
;

state: 		
		NAME EQL exp 			{ 	symbolTable[$1] = $3; cout << $3 << endl; }
	|	VARINT NAME			{	cout << $$ << endl;}
	|	VARINT NAME EQL exp		{symbolTable[$2] = $4; }
	|	FUNCMAIN			{	$$ = yylval.value;}
	|	BEG				{	$$ = yylval.value; }
	|	END				{	$$ = yylval.value; cout << "}" << endl;	}
	| 	OUTP exp 			{ cout << "\tprintString (\"" << $2 << "\");" << endl; }
	| 	FUNCPRINTI exp 			{ cout << "\tprintINT: " << $2  << endl; }
	| 	FUNCPRINTLINE  			{ cout << "NEWLINE FUC\n" << endl; }
	|	FUNCPRINTS OP QUOTE NAME QUOTE CP { cout << "print string = " << $4 << endl;}
	|	FUNCPRINTS OP QUOTE QUOTE CP { cout << "print string = " << " " << endl; }
	|	FUNCPRINTS OP  STRINGTEXT  CP { cout << "print string = " << $3 << endl; }
	|	NUMBER CONTINUESTATE	{ cout << $1 << " continue" << endl;}
	|	DOSTATE NUMBER NAME EQL NUMBER NUMBER { cout << "do " << $2 << " " << $3 << " " << $5 << endl; }
	|	DOSTATE NUMBER NAME EQL NUMBER NUMBER NUMBER{ cout << "do " << "LABEL: " << $2 << " " << $3 << " = " << $5 << " Increment: " << $7 << endl;}
	|	DOSTATE NUMBER NAME EQL NUMBER NAME NUMBER{ cout << "do " << "LABEL: " << $2 << " " << $3 << " = " << $5 << " Increment: " << $7 << endl;}
	|	IFSTATE exp			{cout << "If Statement is: " << $2 << endl;}
	|	ELSESTATE			{cout << "ELSE\n";}
;

exp:	
		NUMBER		{	$$ = yylval.value; 	}
	|       NAME		{	$$ = symbolTable[$1];	}
	|	exp DOTLT exp 	{	$$ = ($1 < $3); cout << "LT Test: " << $1 << " < "  << $3 << endl;}
	|	exp DOTEQ exp	{ 	$$ = ($1 == $3); }
	|	exp DOTNEQ exp	{	$$ = ($1 != $3);}
	|	exp DOTGE exp	{ 	$$ = ($1 >= $3);}
	|	exp ANDAND exp	{ 	$$ = ($1 && $3);}
	|	exp OROR exp	{ 	if($1 || $3) $$ = 1;	else $$ = 0;}
	|	OP exp CP	{	$$ = $2; 		}
	|	exp ADD exp 	{	$$ = $1 + $3; 		}
	|	exp SUB exp	{	$$ = $1 - $3;		}
	|	exp MOD exp	{	$$ = $1 % $3; }
	|	exp MUL exp	{	$$ = $1 * $3;}
	|	exp DIV exp	{	$$ = $1 / $3;}
	|	exp EX exp 	{ 	$$ = pow( (double)$1, (double)$3);}
;			

%%

void yyerror(char const *s){
	fprintf(stderr, "error: %s\nERROR", s);
}