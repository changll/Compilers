%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
using namespace std;

extern int yylex();
extern int yyparse();
extern FILE* yyin;

void yyerror(char const*);

map<string, int> symbolTable;

vector<int> doLoops;

int rCount = 0;


%}

%union {

	int value;
	char* str;
}

%error-verbose

%token <value> NUMBER
%token <str> NAME
%token <str> STRINGTEXT




%token EOL  

%token FUNC
%token OUT

%token ANDAND OROR



%token BEG END


%left CP OP
%left DOTLT DOTEQ DOTNEQ DOTGE
%token EQL GT LT
%left ADD SUB
%left MUL DIV MOD
%left EX






%token <value> OUTP


%token SEMI QUOTE COMMA
%token NEWLINE


%token FUNCPRINTLINE FUNCPUSHI FUNCPRINTINT FUNCPRINTSTRING FUNCPRINTS FUNCPRINTI
%token DOSTATE CONTINUESTATE IFSTATE FUNCMAIN ELSESTATE

%token VARSTRING VARINT VARCHAR VARLONG VARENUM;



%type <value> exp

%type <value> state


%%

start : line
;



line : 

		line SEMI
	|	line NEWLINE
	|	line state NEWLINE
	| 	line state SEMI
	| 	line error SEMI { cout << ">>> "; yyclearin; } 
	|
;

state: 		NAME EQL exp 	{ 	symbolTable[$1] = $3;
					cout << $3 << endl; 
				}
	|	VARINT NAME	{
					cout << $$ << endl;
				}
	|	VARINT NAME EQL exp	{
						symbolTable[$2] = $4;
					}
	|	FUNCMAIN	{
					$$ = yylval.value;
					cout << "int r0, r1, r2, r3, r4, r5, r6, r7,r8, r9, r10, r11, r12, r13, r14, r15, r16; \nint *iptr1; \nchar *cptr1; \nchar *fp, *sp;\nchar globalData[1024];\nchar moreGlobalData[1024];\n\nmain()\n{\n" ;
					cout << "\tinitstack();" << endl;	
				}
	|	BEG		{	$$ = yylval.value; 
}
	|	END		{	$$ = yylval.value; 
					cout << "}" << endl;	}
	| 	OUTP exp { cout << "\tprintString (\"" << $2 << "\");" << endl; }
	| 	FUNCPRINTI exp { cout << "\tprintINT: " << $2  << endl; }
	| 	FUNCPRINTLINE  { cout << "NEWLINE FUC\n" << endl; }
	|	FUNCPRINTS OP QUOTE NAME QUOTE CP {
					cout << "print string = " << $4 << endl;
					}
	|	FUNCPRINTS OP QUOTE QUOTE CP {
					cout << "print string = " << " " << endl;
					}

	|	FUNCPRINTS OP  STRINGTEXT  CP {
					cout << "print string = " << $3 << endl;

				}
	|	NUMBER CONTINUESTATE	{
						cout << $1 << " continue" << endl;
					}
	|	DOSTATE NUMBER NAME EQL NUMBER NUMBER {
						cout << "do " << $2 << " " << $3 << " " << $5 << endl;
					}
	|	DOSTATE NUMBER NAME EQL NUMBER NUMBER NUMBER{
						cout << "do " << "LABEL: " << $2 << " " << $3 << " = " << $5 << " Increment: " << $7 << endl;
					}
	|	DOSTATE NUMBER NAME EQL NUMBER NAME NUMBER{
						cout << "do " << "LABEL: " << $2 << " " << $3 << " = " << $5 << " Increment: " << $7 << endl;
					}
	|	IFSTATE exp		{cout << "If Statement is: " << $2 << endl;}
	|	ELSESTATE		{cout << "ELSE\n";}
	





;

exp:	
		NUMBER		{	$$ = yylval.value; 	}
	|       NAME		{	$$ = symbolTable[$1];	}


	|	exp DOTLT exp 	{ 
					if($1 < $3) $$ = 1;
					else $$ = 0;
					cout << "$1: " << $1 << endl;
					cout << "$3: " << $3 << endl;

				}
	|	exp DOTEQ exp	{ 
					if($1 == $3) $$ = 1;
					else $$ = 0;
					
					

		}
	|	exp DOTNEQ exp	{ 

					if($1 != $3) $$ = 1;
					else $$ = 0;
		}
	|	exp DOTGE exp	{ 
					if($1 >= $3) $$ = 1;
					else $$ = 0;
		}
	|	exp ANDAND exp	{ 
					if($1 && $3) $$ = 1;
					else $$ = 0;
		}
	|	exp OROR exp	{ 
					if($1 || $3) $$ = 1;
					else $$ = 0;
		}






	|	OP exp CP	{	$$ = $2; 		}






	|	exp ADD exp 	{	$$ = $1 + $3; 		
					if (rCount > 13) rCount = 0;
					cout << "\tr" << rCount++ << " = " << $1 << ";" << endl;
					cout << "\tr" << rCount++ << " = " << $3 << ";" << endl; 
					cout << "\tr" << rCount++ << " = " << "r" << (rCount - 2) << " + " << "r" << (rCount - 1) << ";" << endl; 
}


	|	exp SUB exp	{	$$ = $1 - $3;
					if (rCount > 13) rCount = 0;
					cout << "\tr" << rCount++ << " = " << $1 << ";" << endl;
					cout << "\tr" << rCount++ << " = " << $3 << ";" << endl; 
					cout << "\tr" << rCount++ << " = " << "r" << (rCount - 2) << " - " << "r" << (rCount - 1) << ";" << endl; 
 		}


	|	exp MOD exp	{	$$ = $1 % $3; }



	|	exp MUL exp	{	$$ = $1 * $3;
					if (rCount > 13) rCount = 0;
					cout << "\tr" << rCount++ << " = " << $1 << ";" << endl;
					cout << "\tr" << rCount++ << " = " << $3 << ";" << endl; 
					cout << "\tr" << rCount++ << " = " << "r" << (rCount - 2) << " * " << "r" << (rCount - 1) << ";" << endl; 
 		}
	|	exp DIV exp	{	$$ = $1 / $3;
					if (rCount > 13) rCount = 0;
					cout << "\tr" << rCount++ << " = " << $1 << ";" << endl;
					cout << "\tr" << rCount++ << " = " << $3 << ";" << endl; 
					cout << "\tr" << rCount++ << " = " << "r" << (rCount - 2) << " / " << "r" << (rCount - 1) << ";" << endl; 
		}


	|	exp EX exp 	{ 	$$ = pow( (double)$1, (double)$3);
					
					int power = 1;
					for(int i=1; i <= $3; i++){
     						power *= $1;
						if (rCount > 13) rCount = 0;

						cout << "\tr" << rCount++ << " = " << $1 << ";" << endl;
						cout << "\tr" << rCount++ << " = " << "r" << (rCount - 2) << " * " << "r" << (rCount - 2) << ";" << endl; 
					}
				
				}



;			

%%

void yyerror(char const *s){
	fprintf(stderr, "error: %s\nERROR", s);
}