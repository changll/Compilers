%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
#include "Stack.h"
#include "SymbolTable.h"
#include <sstream>
using namespace std;

extern int yylex();
extern int yyparse();
extern FILE* yyin;

void yyerror(char const*);

map<string, string> symbolTable;

vector<int> doLoops;

int rCount = 1;



struct DoStruct{

	int intStart;
	int intEnd;
	int intJump;

	DoStruct(int x, int y, int z){
		intStart = x;
		intEnd = y;
		intJump = z;
	}

};

int regCounter = 0;


%}

%union {

	int value;
	char* str;
}

%error-verbose

%token <value> NUMBER
%token <str> NAME
%token <str> STRINGTEXT

%token EOL 
%token FUNC
%token OUT
%token ANDAND OROR
%token BEG END
%left CP OP
%left DOTLT DOTEQ DOTNEQ DOTGE
%token EQL GT LT
%left ADD SUB
%left MUL DIV MOD
%left EX
%token <value> OUTP
%token SEMI QUOTE COMMA
%token NEWLINE
%token FUNCPRINTLINE FUNCPUSHI FUNCPRINTINT FUNCPRINTSTRING FUNCPRINTS FUNCPRINTI
%token DOSTATE CONTINUESTATE IFSTATE FUNCMAIN ELSESTATE
%token VARSTRING VARINT VARCHAR VARLONG VARENUM;

%type <str> exp
%type <str> state


%%

start : line
;

line : 

		line SEMI
	|	line NEWLINE
	|	line state NEWLINE
	| 	line state SEMI
	| 	line error SEMI { cout << ">>> "; yyclearin; } 
	|
;

state: 		
		NAME EQL exp 			{;	


						}
	|	VARINT NAME			{

					symbolTable[$2] = regCounter++;
					cout << "!!!exp name: " << $2 << " reg value = " << symbolTable.find($2)->second << "  " << endl;
						

	}
	|	VARINT NAME EQL exp		{;	 }
	|	FUNCMAIN			{

								cout << "\nint r0, r1, r2, r3, r4, r5, r6, r7;\nint *iptr1;\nchar *cptr1;\nchar *fp, *sp;\n\nmain()\n{\ninitstack();\n" ;	
						}
	|	BEG				{;	 }
	|	END				{;		}
	| 	OUTP exp 			{;  }
	| 	FUNCPRINTI exp 			{; 

				
						
						}
	| 	FUNCPRINTLINE  			{ ; }
	|	FUNCPRINTS OP QUOTE NAME QUOTE CP { ;}
	|	FUNCPRINTS OP QUOTE QUOTE CP { ; }
	|	FUNCPRINTS OP  STRINGTEXT  CP { ; }
	|	NUMBER CONTINUESTATE	{ cout << $1 << " continue" << endl;}
	|	DOSTATE NUMBER NAME EQL NUMBER NUMBER { cout << "do " << $2 << " " << $3 << " " << $5 << endl; }
	|	DOSTATE NUMBER NAME EQL NUMBER NUMBER NUMBER{ cout << "do " << "LABEL: " << $2 << " " << $3 << " = " << $5 << " Increment: " << $7 << endl;}
	|	DOSTATE NUMBER NAME EQL NUMBER NAME NUMBER{ cout << "do " << "LABEL: " << $2 << " " << $3 << " = " << $5 << " Increment: " << $7 << endl;}
	|	IFSTATE exp			{cout << "If Statement is: " << $2 << endl;}
	|	ELSESTATE			{cout << "ELSE\n";}
;

exp:	
		NUMBER		{	

				stringstream ss;
  				ss << $1;
  				string temp_str = ss.str();
  				char* char_type = (char*) temp_str.c_str();
  				$$ = char_type;


		}
	|       NAME		{	

				stringstream ss;
  				ss << regCounter;
  				string temp = ss.str();
				char* char_type = (char*) symbolTable.find(temp)->second.c_str();
				//cout << "exp name: " << $1 << "reg value = " << symbolTable.find($1)->second << endl;
				$$ = char_type;
				

	
				}
	|	exp DOTLT exp 	{	}
	|	exp DOTEQ exp	{ 	}
	|	exp DOTNEQ exp	{	}
	|	exp DOTGE exp	{ 	}
	|	exp ANDAND exp	{ 	}
	|	exp OROR exp	{ 	}
	|	OP exp CP	{			}
	|	exp ADD exp 	{		}
	|	exp SUB exp	{		}
	|	exp MOD exp	{	 }
	|	exp MUL exp	{	

			cout << "r" << regCounter++ << " = " <<  $1 << endl;
			cout << "r" << regCounter++ << " = " << $3 << endl;
			cout << "r" << regCounter++ << " = " << "r" << regCounter-2 << " * " << "r" << regCounter-1 << ";" << endl;




				}
	|	exp DIV exp	{	}
	|	exp EX exp 	{ 	}
;			

%%

void yyerror(char const *s){
	fprintf(stderr, "error: %s\nERROR", s);
}