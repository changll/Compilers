%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <map>

using namespace std;

extern int yylex();
extern int yyparse();
extern FILE* yyin;

void yyerror(char const*);

map<string, int> symbolTable;




%}

%union {

	int value;
	char* str;
}

%error-verbose

%token <value> NUMBER
%token <str> NAME


%token EOL  



%token FUNC
%token OUT


%token BEG END

%token PRINT OUTPUT
%token EQL
%left ADD SUB
%left MUL DIV
%left CP OP

%token SEMI
%token NL



%type <value> exp 
%type <value> state



%%


start : line
;

line : 
		line SEMI
	| 	line state SEMI
	| 	line error SEMI { cout << ">>> "; yyclearin; } 
	|
;

state: 		NAME EQL exp 	{ 	symbolTable[$1] = $3;
					cout << $3 << endl; 
					$$ = $3;	}
	| 	PRINT NAME	{ 	cout << symbolTable[$2] << endl;
   					$$ = symbolTable[$2]; }
;

exp:	
		NUMBER		{	$$ = yylval.value; 	}
	|       NAME		{	$$ = symbolTable[$1];	}
	|	OP exp CP	{	$$ = $2; 		}
	|	exp ADD exp 	{	$$ = $1 + $3; 		}
	|	exp SUB exp	{	$$ = $1 - $3; 		}
	|	exp MUL exp	{	$$ = $1 * $3; 		}
	|	exp DIV exp	{	$$ = $1 / $3;		}

;			

%%

void yyerror(char const *s){
	fprintf(stderr, "error: %s\nTEST", s);
}